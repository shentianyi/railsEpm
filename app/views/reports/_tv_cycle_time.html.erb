<style type="text/css">
    .table > thead > tr > th, .table > tbody > tr > td {
        text-align: center;
        background: none;
        border: none;
        margin-top: 20px;
    }

    .table > thead > tr > th {
        background: skyblue;
        color: white;
        font-weight: bold;
    }

    .table > thead > tr > th:first-child {
        border-top-left-radius: 10px;
    }

    .table > thead > tr > th:last-child {
        border-top-right-radius: 10px;
    }
</style>

<div class="col-sm-12" style="border-bottom: 4px solid #000;">
  <div class="pull-left" style="padding: 10px;">
    <button type="button" class="btn btn-primary fullscreen">Full Screen</button>
  </div>
</div>

<div id="full_screen" style="display: none;">
</div>


<div class="col-sm-12" style="margin-top: 20px; text-align: center">
  <div style="text-align: left">
    <p>
      播放周期(秒)[最小播放周期是30秒]<input type="text" id="intervalTime" value="60"/>
    </p>
  </div>
  <div style="text-align: left">
    <p>
    <h4>展示配置</h4>
  <span>
    <input type="radio" name="display-setting" class="display-setting" value="Default" checked> 默认配置

    <input type="radio" name="display-setting" class="display-setting" value="FL"> 滚筒展示

    <input type="radio" name="display-setting" class="display-setting" value="TL"> 波轮展示
  </span>
    </p>

  </div>
  <div class="list">
    <%= render partial: 'display_set_items/list' %>
  </div>
</div>
<script type="text/javascript" charset="utf-8">
    /*全局变量*/
    var FullScreenInterval;
    var cycle = 0;
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    //  IntervalTime: 各个生产线之间的切换时间  现在是 120s ＝ 2 分钟
    // SignalInterTime : cycletime  movingtime  moving & cycle time 之间的切换时间  现在是 40s
    //  120s ＝ 40s ＊ 3   切换时间可以增加，一般都是按照比例
    //  tips:  如果SignalInterTime 时间过短，会出现 刚获取到 cycle time 的数据 ，moving time 已经开始获取。 如果后者比前者快，则呈现出来的效果是:
    //  cycle time 出来闪一下， 然后立马显示  moving time
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    var IntervalTime = 120000;
    var SignalInterTime = 60000;
    var product_line_list;
    var firstloading = false;
    var CurrentDate = new Date().getDate();

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    //  c 表示 cycletime   m 表示 movingtime  mc 表示 moving & cycle time
    //  ["c", "m", "mc"] 表示  先显示 cycletime   再显示 movingtime  最后显示  moving & cycle time
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    var ShowWay = ["c"];

    setInterval(function () {
        // if (CurrentDate != new Date().getDate() || product_line_list == null || product_line_list.length == 0) {
        product_line_list = GetListData();
        CurrentDate = new Date().getDate();
        //}
    }, 60000);

    var styles = {
        /*图表的标题,在后面的代码里面设置*/
        title: "",
        /*图表的副标题,在后面的代码里面设置*/
        subtitle: "",
        /*标题的字体大小*/
        title_font_size: "30px",
        title_color: "white",
        /*副标题的字体大小*/
        subtitle_font_size: "18px",
        subtitle_color: "white",
        /*柱状图 超过 最大值的警示颜色 红色*/
        warn_color: "#ff0000",
        /*柱状图 正常 的颜色  绿色*/
        normal_color: "limegreen",
        /*图表的背景颜色设置*/
        //chart_background: "#404a56  ",
        /*柱状图上部显示的字体颜色和大小设置*/
        labels_font_size: "30px",
        labels_color: "white",
        /*x轴 字体和颜色设置*/
        xAxis_color: "white",
        xAxis_font_size: "20px",
        /*y轴字体和颜色设置*/
        yAxis_color: "white",
        yAxis_font_size: "20px",
        /*y轴 标题 字体 和 颜色 设置*/
        //yAxis_title: "Value(s)",
        yAxis_title: "",
        yAxis_title_font_size: "30px",
        yAxis_title_color: "white",
        /*x轴 标题  字体 和 颜色 设置*/
        xAxis_title: "",
        xAxis_title_font_size: "30px",
        xAxis_title_color: "white"
    };

    $('.fullscreen').click(function () {
        SignalInterTime = parseInt($('#intervalTime').val()) * 1000;
        console.log(SignalInterTime);
        if (SignalInterTime >= 30000) {
            maskFullScreen();
            product_line_list = GetListData();

            IntervalTime=SignalInterTime*ShowWay.length+2000;

            if (product_line_list.length > 0) {
                firstloading = true;
                cycle = 0;

                HowToShow(ShowWay, product_line_list[cycle]);

                FullScreenInterval = setInterval(function () {
                    if (product_line_list != null && product_line_list.length > 0 && !firstloading) {
                        if (cycle >= product_line_list.length - 1) {
                            cycle = -1;
                        }
                        cycle++;
                        HowToShow(ShowWay, product_line_list[cycle]);
                    }
                }, IntervalTime);
            }
        } else {
            alert('最小播放周期是30秒!');
        }
    });

    function HowToShow(way, Productline) {
        var now = new Date();
        var EndTime = now.format("yyyy-MM-dd hh:mm:ss");
        var StartTime = new Date().format('yyyy-MM-dd').toString() + ' ' + '00:00:00';
        if (way.length == 0) {
            console.log("way is null");
        } else if (way.length == 1) {
            var signal = TransferType(way[0]);
            DrawCharts({name: signal.name}, signal.url, Productline, 100, StartTime, EndTime);
        } else if (way.length == 2) {
            var way_first = TransferType(way[0]);
            var way_second = TransferType(way[1]);

            DrawCharts({name: way_first.name}, way_first.url, Productline, 100, StartTime, EndTime);

            setTimeout(function () {
                DrawCharts({name: way_second.name}, way_second.url, Productline, 100, StartTime, EndTime);
            }, SignalInterTime);

        } else if (way.length == 3) {
            var first = TransferType(way[0]);
            var second = TransferType(way[1]);
            var third = TransferType(way[2]);

            DrawCharts({name: first.name}, first.url, Productline, 100, StartTime, EndTime);

            setTimeout(function () {
                DrawCharts({name: second.name}, second.url, Productline, 100, StartTime, EndTime);

                setTimeout(function () {
                    DrawCharts({name: third.name}, third.url, Productline, 100, StartTime, EndTime);
                }, SignalInterTime);

            }, SignalInterTime);
        }
    }

    function TransferType(type) {
        switch (type) {
            case "c":
                return {
                    name: "CycleTime -- ",
                    url: "cycle_kpi_data"
                };
                break;
            case "m":
                return {
                    name: "WaitingTime -- ",
                    url: "moving_kpi_data"
                };
                break;
            case "mc":
                return {
                    name: "Waiting&Cycle Time -- ",
                    url: "cycle_and_moving_kpi_data"
                };
                break;
            default:
                console.log("Error");
                return {
                    name: "CycleTime -- ",
                    url: "cycle_kpi_data"
                };
                break;
        }
    }

    function DrawCharts(type, url, ProductLine, interval, start_time, end_time) {
        GetProductLineDataAjax(url, ProductLine, interval, start_time, end_time, function (data) {
                    if (url == "cycle_and_moving_kpi_data") {
                        var MovingAndCycleTimeData = data;
                        var moving_values = new Array;
                        var cycle_values = new Array;
                        var xAxis_value = new Array;
                        var charts_target_max = new Array;
                        var charts_target_min = new Array;

                        for (var i = 0; i < MovingAndCycleTimeData.length; i++) {
                            xAxis_value.push(MovingAndCycleTimeData[i].name + "#" + MovingAndCycleTimeData[i].code + "#" + MovingAndCycleTimeData[i].cycle_count + "#" + MovingAndCycleTimeData[i].moving_count);
                            charts_target_max.push(MovingAndCycleTimeData[i].target_max);
                            charts_target_min.push(MovingAndCycleTimeData[i].target_min);

                            if (MovingAndCycleTimeData[i].cycle_time > MovingAndCycleTimeData[i].target_max) {
                                cycle_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#ff0000',
                                    y: MovingAndCycleTimeData[i].cycle_time
                                });
                            } else if (MovingAndCycleTimeData[i].cycle_time < MovingAndCycleTimeData[i].target_min) {
                                cycle_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#00FF7F',
                                    y: MovingAndCycleTimeData[i].cycle_time
                                });
                            } else {
                                cycle_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#00FF7F',
                                    y: MovingAndCycleTimeData[i].cycle_time
                                });
                            }

                            if (MovingAndCycleTimeData[i].moving_time > MovingAndCycleTimeData[i].target_max) {
                                moving_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#ff0000',
                                    y: MovingAndCycleTimeData[i].moving_time
                                });
                            } else if (MovingAndCycleTimeData[i].moving_time < MovingAndCycleTimeData[i].target_min) {
                                moving_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#00EEEE',
                                    y: MovingAndCycleTimeData[i].moving_time
                                });
                            } else {
                                moving_values.push({
                                    id: MovingAndCycleTimeData[i].id,
                                    color: '#00EEEE',
                                    y: MovingAndCycleTimeData[i].moving_time
                                });
                            }
                        }
                        styles.title = type.name + ProductLine.name;
                        styles.subtitle = "--" + ProductLine.cn_name;
                        DrawDoubleChart(moving_values, cycle_values, charts_target_max, xAxis_value, '#full_screen', styles);
                    }
                    else {
                        var CycleTimeData = data;
                        var xAxis_value = new Array;
                        var charts_value = new Array;
                        var charts_target_max = new Array;

                        for (var i = 0; i < CycleTimeData.length; i++) {
                            if (CycleTimeData[i].code.indexOf('-') > -1)
                                xAxis_value.push(CycleTimeData[i].code.split('-')[1]);
                            else
                                xAxis_value.push(CycleTimeData[i].code);

                            if (CycleTimeData[i].value > CycleTimeData[i].target_max) {
                                charts_value.push({
                                    id: CycleTimeData[i].id,
                                    color: styles.warn_color,
                                    y: CycleTimeData[i].value
                                });
                            } else {
                                charts_value.push({
                                    id: CycleTimeData[i].id,
                                    color: styles.normal_color,
                                    y: CycleTimeData[i].value
                                });
                            }
                            charts_target_max.push(CycleTimeData[i].target_max);
                        }
                        styles.title = type.name + ProductLine.name;
                        styles.subtitle = "--" + ProductLine.cn_name;
                        DrawSingleChart(charts_value, charts_target_max, xAxis_value, '#full_screen', styles);
                    }
                    firstloading = false;
                }
        )
    }

    esckey();

    var ProductLineList;
    function GetListData() {
        var date = new Date();
        if (date == null)
            return [];
        $.ajax({
            url: '/departments/product_line_list',
            type: 'get',
            async: false,
            data: {date: date, remark: $('.display-setting:checked').val()},
            success: function (data) {
                ProductLineList = data;
            },
            error: function () {
                alert("Network Error!")
            }
        });
        return ProductLineList;
    }

    function GetProductLineDataAjax(url, ProductLine, Interval, start_time, end_time, callback) {
        if (ProductLine == null || Interval == null)
            return;
        $.ajax({
            url: '/departments/' + url,
            type: 'get',
            data: {
                product_line: ProductLine.id,
                interval: Interval,
                start_time: start_time,
                end_time: end_time,
                from_tv: true
            },
            success: function (data) {
                if (data) {
                    callback(data);
                }
            },
            error: function () {
                console.log("something error");
            }
        })
    }

    function esckey() {
        $(document).keyup(function (event) {
            switch (event.keyCode) {
                case 27:
                {
                    removemaskFullScreen();
                    cancleFullScreen(document.documentElement);
                    try {
                        window.clearInterval(FullScreenInterval);
                    } catch (e) {
                        console.log(e);
                    }
                }
            }
        });
    }

    function removemaskFullScreen() {
        $('#full_screen').empty();
        $('#full_screen').css({
            "display": "none",
            "position": "absolute",
            "margin-left": "0",
            "margin-top": "0",
            "background-color": "transparent",
            "overflow": "hidden",
            "height": 0,
            "filter": "alpha(opacity=0)",
            "opacity": "0",
            "width": 0,
            "z-index": "0"
        });

        $('#report-menu').css({display: "block"});
    }

    function maskFullScreen() {
        $('#report-menu').css({
            "display": "none"
        });

        makeFullScreen(document.documentElement);

        $('#full_screen').css({
            "display": "block",
            "position": "absolute",
            "margin-left": "0px",
            "margin-top": "-70px",
            "margin-right": "-30px",
            "background-color": "white",
            "overflow": "hidden",
            "height": function () {
                return '100%';
            },
            "filter": "alpha(opacity=100)",
            "opacity": "1",
            "width": function () {
                return '100%';
            },
            "z-index": "99999"
        });
    }

    function makeFullScreen(divObj) {
        var requestMethod = divObj.requestFullscreen || divObj.webkitRequestFullscreen || divObj.mozRequestFullScreen || divObj.msRequestFullscreen;
        if (requestMethod) {
            requestMethod.call(divObj);
        } else if (typeof window.ActiveXObject != "undefined") {
            var wscript = new ActiveXObject("WScript.Shell");
            if (wscript != null) {
                wscript.SendKeys("{F11}");
            }
        }
    }

    function cancleFullScreen(divObj) {
        var requestMethod = divObj.exitFullscreen || divObj.webkitCancelFullScreen || divObj.mozCancelFullScreen || divObj.exitFullscreen;
        if (requestMethod) {
            requestMethod.call(divObj);
        } else if (typeof window.ActiveXObject != "undefined") {
            var wscript = new ActiveXObject("WScript.Shell");
            if (wscript != null) {
                wscript.SendKeys("{F11}");
            }
        }
    }

    function DrawSingleChart(charts_values, charts_max_values, xaxis_values, id, style) {
        /*chart*/
        var chart = $(id).highcharts({
            chart: {
                backgroundColor: {
//          深蓝
                    linearGradient: {x1: 0, y1: 0, x2: 1, y2: 1}, stops: [[0, '#6495ED'], [1, 'rgb(48, 48, 96)']]
//          灰色
//          linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1}, stops: [[0, 'rgb(96, 96, 96)'], [1, 'rgb(16, 16, 16)']]
                }
            },
            title: {
                text: "<br/>" + style.title,
                align: "center",
                style: {
                    fontSize: style.title_font_size,
                    color: style.title_color
                },
                margin: 5,
                useHTML: true
            },
            subtitle: {
                text: "----" + style.subtitle,
                style: {
                    fontSize: style.subtitle_font_size,
                    color: style.subtitle_color
                }
            },
            credits: {
                enabled: false
            },
            xAxis: {
                categories: xaxis_values,
                labels: {
                    style: {
                        color: style.xAxis_color,
                        fontSize: style.xAxis_font_size,
                        fontWeight: "bold"
                    }
                }
            },
            yAxis: {
                title: {
                    text: style.yAxis_title,
                    style: {
                        fontSize: style.yAxis_title_font_size,
                        color: style.yAxis_title_color
                    }
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }],
                labels: {
                    style: {
                        color: style.yAxis_color,
                        fontSize: style.yAxis_font_size,
                        fontWeight: "bold"
                    }
                }
            },
            tooltip: {
                valueSuffix: 's',
                formatter: function () {
                    try {
                        return '<span><b>' + this.x +
                                '</b><br/><b>' + this.series.name + ':</b><b>' + this.y + ' S</b><span>';
                    } catch (e) {
                        return;
                    }
                }
            },
            legend: {
                itemStyle: {color: '#E0E0E3'},
                itemHoverStyle: {color: '#FFF'},
                itemHiddenStyle: {color: '#606063'},
                title: {
                    text: style.xAxis_title,
                    style: {
                        fontSize: style.xAxis_title_font_size,
                        color: style.xAxis_title_color
                    }
                },
                layout: 'horizontal',
                align: 'center',
                verticalAlign: 'bottom',
                borderHeight: 0
            },
            plotOptions: {
                column: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        style: {
                            fontSize: style.labels_font_size,
                            fontWeight: "bold",
                            color: style.labels_color
                        }
                    }
                }
            },
            series: [
                {
                    type: 'column',
                    name: 'Value',
                    data: charts_values,
                    color: 'limegreen'
                }, {
//          type: 'column',
                    name: 'TargetMax',
                    data: charts_max_values,
                    color: '#FF7F00'
                }
            ]
        });


        $(id).append("<div class='pull-right'style='position:absolute;right:40px;top:30px;background:transparent;z-index:99999;'>" +
                "<img src='/assets/beko-logo.png' style='width: 100px;'/></div>");
    }

    function DrawDoubleChart(moving_values, cycle_values, charts_max_values, xaxis_values, id, style) {
        /*chart*/
        var chart = $(id).highcharts({
            chart: {
                backgroundColor: {
//          深蓝
                    linearGradient: {x1: 0, y1: 0, x2: 1, y2: 1}, stops: [[0, '#6495ED'], [1, 'rgb(48, 48, 96)']]
//          灰色
//          linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1}, stops: [[0, 'rgb(96, 96, 96)'], [1, 'rgb(16, 16, 16)']]
                }
            },
            title: {
                text: "<br/>" + style.title,
                align: "center",
                style: {
                    fontSize: style.title_font_size,
                    color: style.title_color
                },
                margin: 5,
                useHTML: true
            },
            subtitle: {
                text: "----" + style.subtitle,
                style: {
                    fontSize: style.subtitle_font_size,
                    color: style.subtitle_color
                }
            },
            credits: {
                enabled: false
            },
            xAxis: {
                categories: xaxis_values,
                labels: {
                    formatter: function () {
                        return this.value.split("#")[1];
                    },
                    style: {
                        color: style.xAxis_color,
                        fontSize: style.xAxis_font_size,
                        fontWeight: "bold"
                    }
                }
            },
            yAxis: {
                title: {
                    text: style.yAxis_title,
                    style: {
                        fontSize: style.yAxis_title_font_size,
                        color: style.yAxis_title_color
                    }
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }],
                labels: {
                    style: {
                        color: style.yAxis_color,
                        fontSize: style.yAxis_font_size,
                        fontWeight: "bold"
                    }
                }
            },
            tooltip: {
                valueSuffix: 's',
                formatter: function () {
                    try {
                        if (this.series.name == "moving-time") {
                            return '<span><b>' + this.x.split('#')[0] +
                                    '</b><br/><b>' + this.series.name + ':</b><b>' + this.y + ' s</b><br/><b>TotalCount:</b><b>' + this.x.split('#')[3] + '</b><span>';
                        } else if (this.series.name == "cycle-time") {
                            return '<span><b>' + this.x.split('#')[0] +
                                    '</b><br/><b>' + this.series.name + ':</b><b>' + this.y + ' s</b><br/><b>TotalCount:</b><b>' + this.x.split('#')[2] + '</b><span>';
                        }
                    } catch (e) {
                        return;
                    }
                }
            },
            legend: {
                itemStyle: {color: '#E0E0E3'},
                itemHoverStyle: {color: '#FFF'},
                itemHiddenStyle: {color: '#606063'},
                title: {
                    text: style.xAxis_title,
                    style: {
                        fontSize: style.xAxis_title_font_size,
                        color: style.xAxis_title_color
                    }
                },
                layout: 'horizontal',
                align: 'center',
                verticalAlign: 'bottom',
                borderHeight: 0
            },
            plotOptions: {
                column: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        style: {
                            fontSize: style.labels_font_size,
                            fontWeight: "bold",
                            color: style.labels_color
                        }
                    }
                }
            },
            series: [
                {
                    type: 'column',
                    name: 'moving-time',
                    data: moving_values,
                    color: 'limegreen'
                }, {
                    type: 'column',
                    name: 'cycle-time',
                    data: cycle_values,
                    color: 'limegreen'
                }, {
                    name: 'TargetMax',
                    data: charts_max_values,
                    color: '#FF7F00'
                }
            ]
        });

        $(id).append("<div class='pull-right'style='position:absolute;right:40px;top:30px;background:transparent;z-index:99999;'>" +
                "<img src='/assets/beko-logo.png' style='width: 100px;'/></div>");
    }


    $('.display-setting').change(function () {
        var remark = $('.display-setting:checked').val();
        $.get('/display_set_items/list', {remark: remark}, function (data) {
            $('.list').html(data);
        });
    });
</script>
